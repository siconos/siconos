"""Save campaigns parameters : map oar job ids, dates, frequencies ...

Usage:

On remote server (i.e. where simulations have been run, probably Luke):

* first, create pkl file, e.g.

from simulation_campaigns import post_process_simus
camp, running = post_process_simus('./', '/nfs_scratch/perignon/Music', './Results_short_bass_1312', 'campaign_short_1312.pkl')

==> write a pkl file which contains all informations concerning finished jobs. Running contains the list of job ids which are not finished.

Args:
1 : path to stdout/stderr files
2 : path (remote) to h5 files (results)
3 : path (local) where results (h5 files) should be transfered
4 : name of pkl

2 and 3 will be used to produce 'transfert.sh' which contains commands like 'scp remote_path:...h5 local_path'

* transfert (or commit) pkl file on local server (where post-proc routines will be executed)

* use prepare_post_processing notebook on pkl file.


"""
import numpy as np
import os
import glob
import pickle


def get_job_duration(filename):
    jobid = filename.split('.')[-2]
    file = open(filename, 'r')
    res = file.readlines()
    for i in range(len(res)):
        if res[i].find("Duration") > -1:
            duration = res[i].split('Duration:  ')[-1]
            return jobid, duration.split('\n')[0]
    return jobid, -1

def post_process_simus(filepath, remote_results_path, local_results_path, outputfile):
    """
    Assuming some simulations run with oar and using 
    '.sh' files in current dir, with
    * all OAR.*stdout files in filepath
    * a job_params file (e.g. generated by list.sh) in filepath
    * results (h5) files in results_path

    Try campaign_date = post_process_simus(filepaht, results_path)
    to create dict campaign_date which contains data to
    be post-processed.
    
    See guitar_postprocessing.ipynb for details on campaign dict usage.
    """
    # All 'stdout' files in filepath
    files = glob.glob(os.path.join(filepath, '*.stdout'))
    durations = {}
    running_jobs = []
    for file in files:
        jobid, duration = get_job_duration(file)
        if float(duration) > -1: # only finished jobs are taken into account
            durations[jobid] = duration
        else:
            running_jobs.append(jobid)

    parameters_file_name = os.path.join(filepath, 'jobs_params')
    parameters_file = open(parameters_file_name, 'r')
    lines = parameters_file.readlines()
    campaigns = {}
    for line in lines:
        current = line.split()
        freq = current[0]
        jobid = current[1]
        node = current[2].strip('luke')
        coeff = current[4]
        name = current[5]
        if name.find('bass_one_c') >= 0:
            prefix = 'guitar_single_e' + name[-3:] + '_1001_'
        elif name.find('one') >= 0:
            prefix = 'single_e' + name[-3:] + '_999_'
        elif name.find('bass') >= 0:
            prefix = 'bass_e' + name[-3:] + '_862_'
        elif name.find('fretless') >= 0:
            prefix = 'fretless_e' + name[-3:] + '_862_'
        else:
            raise IOError('Unknown simulation type.')
        resultsfile = os.path.join('F_' + freq + '_id_' + jobid)
        fname = prefix + freq.split('.')[0] + '.h5'
        fullname  = os.path.join(resultsfile, fname)
        conv_fullname = os.path.join(resultsfile, 'converted_' + fname)
        if name not in campaigns.keys():
            campaigns[name] = {}
        if jobid in durations.keys(): # only finished jobs are taken into account
            campaigns[name][freq] = [jobid, durations[jobid], node, coeff, fullname, conv_fullname]
        campaigns['results_paths'] = [remote_results_path, local_results_path]
    output = open(outputfile, 'wb')
    pickle.dump(campaigns, output)
    output.close()
    return campaigns, running_jobs


def get_finished_jobs(campaign, filename):
    """Print list of files/dirs that can be 
    transfered for local post-processing
    """
    file=open(filename,'w')
    for name in campaign:
        for freq in campaign[name]:
            file.write(camp[name][freq][4])


def transfer_data(campaigns):
    sources = []
    commands = []
    remote_dir = campaigns['results_paths'][0]
    local_dir = campaigns['results_paths'][1]
    for name in campaigns:
        if name != 'results_paths':
            for freq in campaigns[name]:
                target_name = os.path.join(local_dir, campaigns[name][freq][4])
                conver_name = os.path.join(local_dir, campaigns[name][freq][5])
                do_transfer = (not os.path.exists(target_name)) and (not os.path.exists(conver_name))
                print(do_transfer, target_name)
                if do_transfer:
                    sources.append(os.path.join(remote_dir, campaigns[name][freq][4]))
                    sources[-1] = os.path.dirname(sources[-1])
                    commands.append("scp -r luke.ciment:" + sources[-1] + " " + local_dir)
    if not os.path.exists(local_dir):
        os.mkdir(local_dir)
    file = open('transfert.sh', 'w')
    file.write("#!/bin/bash\n")
    for cmd in commands:
        file.write(cmd + '\n')
    file.close()
    

#filepath = '/nfs_scratch/perignon/Music'
#indices = np.arange(3, 16)
#freqs = 2 ** indices * 1960

# # Luke, bass guitar, coeff restit = 0.9, start on 30/11/2017
# filepath = './results_bass/2017_11_30'
# freq2job = {}
# hosts = [38, ] * 13
# hosts[0] = 42
# freq2job[freqs[12]] = (3878785, 14552.025)
# freq2job[freqs[11]] = (3877920,  57632.99008)
# freq2job[freqs[10]] = (3877921,  5885.640925)
# freq2job[freqs[9]] = (3877922, 16464.855114)
# freq2job[freqs[8]] = (3877923, 3140.216699)
# freq2job[freqs[7]] = (3877924,  2014.87907)
# freq2job[freqs[6]] = (3877925,  445.832628)
# freq2job[freqs[5]] = (3877926,  256.352)
# freq2job[freqs[4]] = (3877927,  320.92811)
# freq2job[freqs[3]] = (3877928,  49.077)
# freq2job[freqs[2]] = (3877929,  26.742)
# freq2job[freqs[1]] = (3877930,  14.95)
# freq2job[freqs[0]] = (3877931,  9.495)

# g2017_11_30_e09 = create_campaign(freq2job, freqs, filepath, hosts)

# # Luke, bass guitar, coeff restit = 0., start on 30/11/2017
# filepath = './results_bass/2017_11_30'
# freq2job = {}
# hosts = [44, ] * 13

# freq2job[freqs[12]] = (3877938, 18424.910)
# freq2job[freqs[11]] = (3877939, 7833.075)
# freq2job[freqs[10]] = (3877940,  4410.211975)
# freq2job[freqs[9]] = (3877941, 1756.556)
# freq2job[freqs[8]] = (3877942, 888.700)
# freq2job[freqs[7]] = (3877943, 1016.859)
# freq2job[freqs[6]] = (3877944, 207.6254)
# freq2job[freqs[5]] = (3877945, 183.0436)
# freq2job[freqs[4]] = (3877946, 55.3991)
# freq2job[freqs[3]] = (3877947, 34.29018)
# freq2job[freqs[2]] = (3877948, 15.1676)
# freq2job[freqs[1]] = (3877949, 8.398)
# freq2job[freqs[0]] = (3877950, 5.116)

# g2017_11_30_e0 = create_campaign(freq2job, freqs, filepath, hosts)

# # Luke, bass guitar, coeff restit = 1., start on 30/11/2017
# filepath = './results_bass/2017_11_30'
# freq2job = {}
# hosts = [44, ] * 13

# freq2job[freqs[12]] = (3878147,  37465.54369)
# freq2job[freqs[11]] = (3878148,  7500.7054)
# freq2job[freqs[10]] = (3878149,  4133.0277)
# freq2job[freqs[9]] = (3878150,  5191.068211)
# freq2job[freqs[8]] = (3878151,  985.9552)
# freq2job[freqs[7]] = (3878152,  472.29017300)
# freq2job[freqs[6]] = (3878153,  233.954)
# freq2job[freqs[5]] = (3878154,  124.46)
# freq2job[freqs[4]] = (3878158,  91.18)
# freq2job[freqs[3]] = (3878159,  30.957)
# freq2job[freqs[2]] = (3878160,  18.193)
# freq2job[freqs[1]] = (3878161,  8.322)
# freq2job[freqs[0]] = (3878162,  5.37)

# g2017_11_30_e1 = create_campaign(freq2job, freqs, filepath, hosts)


# # Luke, fretless bass guitar, coeff restit = 0.9, start on 30/11/2017
# filepath = './results_fretless/2017_01_12'
# freq2job = {}
# hosts = [42, ] * 13

# freq2job[freqs[12]] = (3878240, 123919.2328)
# freq2job[freqs[11]] = (3878241, 69255.26833)
# freq2job[freqs[10]] = (3878242, 37453.121375)
# freq2job[freqs[9]] = (3878243, 19193.3257)
# freq2job[freqs[8]] = (3878244, 9366.6517)
# freq2job[freqs[7]] = (3878245, 4675.471347)
# freq2job[freqs[6]] = (3878246, 2279.230298)
# freq2job[freqs[5]] = (3878247, 1079.76208)
# freq2job[freqs[4]] = (3878248, 559.481385)
# freq2job[freqs[3]] = (3878249, 235.766678)
# freq2job[freqs[2]] = (3878250, 83.5007)
# freq2job[freqs[1]] = (3878251, 34.7391)
# freq2job[freqs[0]] = (3878252, 12.0917)

# f2017_12_01_e09 = create_campaign(freq2job, freqs, filepath, hosts)


# # Luke, fretless bass guitar, coeff restit = 0.9, start on 30/11/2017
# filepath = './results_fretless/2017_01_12'
# freq2job = {}
# hosts = [43, ] * 13

# freq2job[freqs[12]] = (3878260, 123919.2328)
# freq2job[freqs[11]] = (3878261, 69255.26833)
# freq2job[freqs[10]] = (3878262, 37453.121375)
# freq2job[freqs[9]] = (3878263, 19193.3257)
# freq2job[freqs[8]] = (3878264, 9366.6517)
# freq2job[freqs[7]] = (3878265, 4675.471347)
# freq2job[freqs[6]] = (3878266, 2279.230298)
# freq2job[freqs[5]] = (3878267, 1079.76208)
# freq2job[freqs[4]] = (3878268, 559.481385)
# freq2job[freqs[3]] = (3878269, 235.766678)
# freq2job[freqs[2]] = (3878270, 83.5007)
# freq2job[freqs[1]] = (3878271, 34.7391)
# freq2job[freqs[0]] = (3878272, 12.0917)

# f2017_12_01_e0 = create_campaign(freq2job, freqs, filepath, hosts)




#stdout_path = './Simus_bass_0212'
#remote_h5files_path = './Simus_bass_0212'
#local
#campaign_2017_02_12 = post_process_simus(stdout_path, h5files_path)
