# ---  Siconos ci templates ---
# 
# This file contains common definitions and templates for
# continuous integration job of siconos project.
#
# Usage :
# add in .gitlab-ci.yml :
# include: <path-to-this-file>/gitlab-ci-siconos-templates.yml

variables:
  # Default ctest model. Warning : overwritten if set in schedules variables (as we expect)
  ctest_build_model: Continuous
  # Default behavior regarding cdash submission
  cdash_submit: 0
  # Default path to siconos conf. files
  SICONOS_CMAKE_CONF_PATH: $CI_PROJECT_DIR/config_samples
  # By default we allow builds to run in parallel, but certain
  # configurations may require non-parallel builds (cf. swig +
  # serialization requires too much memory)
  allow_parallel_build: 1
  GIT_DEPTH: 1
  #GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME
  # Default build path
  BUILD_DIR: $CI_PROJECT_DIR/build



stages:
  # --- Docker build stage ---
  # The first stage contains jobs used to build
  # docker images 'ready to use' for a Siconos build/install.
  # Requirement for jobs in this stage :
  # - should build and push a docker image to siconos project registry
  # - should be allowed to failed (in order to avoid blocking of last stage jobs)
  # - should run only when commit message contains [docker build]
  # - use Dockerfile from ci_gitlab/dockerfiles/<image-name>
  #
  # Templates for these jobs : .docker-build (see below).
  # We use different layers because some of the generated images are used
  # as a starting point for other images.
  - docker-build
  - docker-build-layer2
  - docker-build-layer3
  # --- Build stage ---
  # jobs run on images generated in previous stage, available in siconos registry:
  # https://gricad-gitlab.univ-grenoble-alpes.fr/nonsmooth/siconos/container_registry
  # - configure : run cmake
  # - run tests
  # - submit to cdash
  # To execute cmake and configure the project
  - configure 
  # To execute make and build the project
  - build     
  # To run all tests
  - test      
  # To install software, generate a "siconos-ready" docker image and asave it in the registry.
  - install 
  - release
  # To build and run all examples
  - examples
  # Templates for these jobs : .siconos-build (see below).
  # --- Doc stages ---
  # Build documentation (run doxygen, sphinx, ...)
  - doc-build
  # Publish html pages
  - doc-deploy 


# --- Templates definitions ---
# Each template can be used in CI jobs, with the keyword 'extends'.



# -- Template used to describe docker-build jobs --
#
# - build and push a docker image into siconos project registry
#   image name : $CI_REGISTRY_IMAGE/$IMAGE_NAME
# - should be allowed to failed (in order to avoid blocking of the jobs in the next stages)
# - should run only when commit message starts with [docker build]
# - use Dockerfile from ci_gitlab/dockerfiles/<IMAGE_NAME>
# - will be tagged <IMAGE_NAME>:latest.
# Based on Kaniko stuff. For details, see https://docs.gitlab.com/ee/ci/docker/using_kaniko.html.
.docker-create-image:
  # Created if the commit message starts with [docker-build] or
  # when the master branch is updated.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: clone
  stage: docker-build
  script:
    - sed -i "s|REGISTRY_PATH|$CI_PROJECT_PATH|g" $CI_PROJECT_DIR/ci_gitlab/dockerfiles/$IMAGE_NAME/Dockerfile
    - export DOCKERFILE_PATH=$CI_PROJECT_DIR/ci_gitlab/dockerfiles/$IMAGE_NAME
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $DOCKERFILE_PATH/Dockerfile 
      --destination $CI_REGISTRY_IMAGE/sources/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
      --destination $CI_REGISTRY_IMAGE/sources/$IMAGE_NAME:latest
      --single-snapshot

.docker-rules:
   rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[docker-build\]/ # if commit message contains "[docker-build]"
    - if: $CI_COMMIT_TAG
    
.docker-manual-rules:
    rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[docker-build\]/
      when: manual
    - when: never

.docker-build:
  extends:
    - .docker-rules
    - .docker-create-image

.docker-manual:
  extends:
    - .docker-manual-rules
    - .docker-create-image


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS # To avoid duplicate pipelines
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # If a source branch of a MR is updated
      when: always
    - if: $CI_OPEN_MERGE_REQUESTS # If a MR is created
    - if: $CI_COMMIT_MESSAGE =~ /\[all-jobs\]/  # If the commit message contains "all jobs"
    - if: $CI_COMMIT_TAG  
    - if: $CI_COMMIT_BRANCH       # If a branch is updated -> delegates specific behavior control to the jobs

.full-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # If changes are pushed to the default branch
    - if: $CI_COMMIT_TAG   # If changes are pushed for a tag.
    - if: $CI_COMMIT_MESSAGE =~ /^\[all-jobs\]/

.devel-rules:
  rules:
    - when: always

    
  
# -- Template used for siconos configure-build-test-install jobs  --
# .siconos-ctest must be overloaded by a specific template like
# .siconos-configure, .siconos-build ...
# 1. Pulls an image (possibly from siconos registry)
#   named  IMAGE_NAME
# 2. executes ctest script. The specific case (configure, build ...) is determined

.siconos-ctest:
  image: $IMAGE_NAME
  variables:
    BUILD_MODE: $CI_JOB_STAGE # stage name is used to set ctest behavior
  script:
    - sh ci_gitlab/ctest_siconos.sh
  extends: .full-rules   # default behavior = full-rules
  
# - Template to complete .siconos-ctest
# Configure (cmake) step.
# Keeps build directory for next stages (build/install/test)
.siconos-configure:
  stage: configure
  extends: .siconos-ctest
  artifacts:
    paths:
      - build
    expire_in: 2 days  

# - Template to complete .siconos-ctest
# build (make) step.
# Gets artifacts from .siconos-configure and keep build dir. as artifact for next stages.
.siconos-build:
  stage: build
  extends: .siconos-ctest
  artifacts:
    paths:
      - build
    expire_in: 2 days 

# - Template to complete .siconos-ctest
# test step.
# Gets artifacts from .siconos-build
.siconos-test:
  stage: test
  extends: .siconos-ctest
  variables:
    OPENBLAS_NUM_THREADS: 1
  artifacts:
      paths:
        - build/
      expire_in: 3 days 
      reports:
        junit: $BUILD_DIR/test_results.xml

# -- Template to execute a the full pipeline (configure/build/test)
# Keeps build directory for next stage (install) as artifact.
.siconos-full:
  extends: .siconos-ctest
  variables:
    BUILD_MODE: all
  stage: configure
  artifacts:
    paths:
      - build
    expire_in: 2 days  

.siconos-full-with-examples:
  image: $IMAGE_NAME
  variables:
    ctest_mode: all
  stage: configure
  script:
    - sh ci_gitlab/ctest_siconos.sh
    - cd $HOME; git clone https://gricad-gitlab.univ-grenoble-alpes.fr/nonsmooth/siconos-tutorials.git
  artifacts:
    paths:
      - build
    expire_in: 2 days  


# A template to install siconos and generates a docker image with a full/uptodate install of siconos
# It uses output (build from artifacts) from a previous job (e.g. debian:build or similar).
# The docker image is saved in the project registries indicated by RESULT_NAME var.
.siconos-install:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
  stage: install
  script:
    - cat $CI_PROJECT_DIR/ci_gitlab/dockerfiles/install_template| sed -e "s|IMAGENAME|$IMAGE_NAME|g" > build/Dockerfile
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_DEPLOY_USER\",\"password\":\"$CI_DEPLOY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --build-arg BUILD_DIR=$BUILD_DIR
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/build/Dockerfile
      --destination $RESULT_NAME-$CI_COMMIT_REF_SLUG:latest
      --destination $RESULT_NAME-$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA
      --single-snapshot
      --cleanup

# A template to installs siconos and generates a docker image with a full/uptodate install of siconos
# that:
#   - can be started as a Jupyter notebook.
#   - contains siconos-tutorials examples
# 
# It uses output (build from artifacts) from a previous job (e.g. debian:build or similar).
# The docker image is saved in the project registries indicated by RESULT_NAME var.
# Source : ci_gitlab/dockerfiles/siconoslab/Dockerfile
.siconos-jupyterlab-install:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: install
  script:
    - cat $CI_PROJECT_DIR/ci_gitlab/dockerfiles/siconoslab/Dockerfile| sed -e "s|IMAGENAME|$IMAGE_NAME|g" > build/Dockerfile
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_DEPLOY_USER\",\"password\":\"$CI_DEPLOY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --build-arg BUILD_DIR=$BUILD_DIR
      --build-arg CI_PROJECT_DIR=$CI_PROJECT_DIR
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/build/Dockerfile
      --destination $RESULT_NAME-$CI_COMMIT_REF_SLUG:latest
      --destination $RESULT_NAME-$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA
      --single-snapshot
      --cleanup
