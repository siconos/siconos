#!@PYTHON_EXECUTABLE@
# -*- coding: utf-8 -*-
#
# @PROJECT_NAME_CAP@ documentation build configuration file, created by
# sphinx-quickstart on Mon Mar 19 15:11:43 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import re
import importlib
import textwrap

# append siconos package build path to sys
siconos_pythonpath = os.path.join("@CMAKE_BINARY_DIR@", 'wrap')
sys.path.insert(0, siconos_pythonpath)
siconos_tools_path = os.path.join("@CMAKE_BINARY_DIR@", 'share')
sys.path.insert(0, siconos_tools_path)

import buildtools as bt

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.intersphinx',
    'sphinxcontrib.bibtex',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.githubpages',
    'sphinxcontrib.youtube',
    #'sphinxcontrib.doxylink'
]

with_python_wrapper = '@WITH_PYTHON_WRAPPER@' == 'ON'
if with_python_wrapper:
    extensions += [
        'sphinx.ext.autodoc',
        'sphinx.ext.autosummary',
        # numpydoc must be listed after autodoc!
        # but we don't need it anymore because of napoleon
        #'numpydoc.numpydoc', 
        # napoleon will preprocess docstrings to convert them to
        # rst in numpydoc style
        'sphinx.ext.napoleon', 
        ]
    #numpydoc_class_members_toctree = True

    # ---- Autodoc config ----
    
    # Use class docstring for documentation, not __init__ (which is the same
    # due to doxy2swig way of doing things).
    autoclass_content = 'class'

    autodoc_default_flags = ['members', 'show-inheritance',]
    autodoc_docstring_signature = True

    # ---- Napoleon config ----
    
    ### Customize napoleon/sphinx output.
    ### Source : https://michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html
    from sphinx.ext.napoleon.docstring import GoogleDocstring

    # first, we define new methods for any new sections and add them to the class
    def parse_keys_section(self, section):
        return self._format_fields('Keys', self._consume_fields())
    GoogleDocstring._parse_keys_section = parse_keys_section

    def parse_attributes_section(self, section):
        return self._format_fields('Attributes', self._consume_fields())
    GoogleDocstring._parse_attributes_section = parse_attributes_section

    def parse_class_attributes_section(self, section):
        return self._format_fields('Class Attributes', self._consume_fields())
    GoogleDocstring._parse_class_attributes_section = parse_class_attributes_section

    # we now patch the parse method to guarantee that the the above methods are
    # assigned to the _section dict
    def patched_parse(self):
        self._sections['keys'] = self._parse_keys_section
        self._sections['class attributes'] = self._parse_class_attributes_section
        self._unpatched_parse()
    GoogleDocstring._unpatched_parse = GoogleDocstring._parse
    GoogleDocstring._parse = patched_parse
    
    napoleon_include_private_with_doc = False
    napoleon_include_init_with_doc = False
    napoleon_include_special_with_doc = False
    napoleon_use_ivar = True
    napoleon_use_param = True
    napoleon_use_rtype = False#True
    
# ---- Start doxyrest conf ---
with_doxyrest = @HAS_DOXYREST@
if with_doxyrest:
    sys.path.insert(1, os.path.abspath('@DOXYREST_SPHINX_DIR@'))
    extensions += ['doxyrest', 'cpplexer']

# ---- Start Breathe/Exhale conf ---
extensions += ['breathe']
components = bt.parse_cmake_list("@COMPONENTS@")
#['externals', 'numerics']
breathe_projects = {}
for comp in components:
    breathe_projects[comp] = "@DOXYGEN_4_RST@/" + comp
    # Path to doxygen outputs
breathe_default_project = 'numerics' # "@PROJECT_NAME@"
breathe_default_members = ('members', 'public-members')

with_exhale = @HAS_EXHALE@
if with_exhale:
    extensions += ['exhale']
    # Setup the exhale extension
    exhale_args = {
        # These arguments are required
        "containmentFolder":     "./sphinx/api",
        "rootFileName":          "library_root.rst",
        "rootFileTitle":         "Library API",
        "afterTitleDescription": textwrap.dedent('''
           .. note::

           The following documentation presents the C++ API.  The Python API
           generally mirrors the C++ API, but some methods may not be available in
           Python or may perform different actions.
        '''),
        "doxygenStripFromPath":  "@CMAKE_SOURCE_DIR@",
        # Suggested optional arguments
        "createTreeView":        True,
        # TIP: if using the sphinx-bootstrap-theme, you need
        #"createTreeView": True,
        #"treeViewIsBootstrap": True,
        #"treeViewBootstrapLevels": 4,
        "exhaleExecutesDoxygen": True,
        #"doxygenStripFromPath": "@CMAKE_SOURCE_DIR@",
        "exhaleUseDoxyfile" : True,
        # Uncomment when using exhale to call doxygen
        # "exhaleDoxygenStdin": textwrap.dedent('''
        #  INPUT = @DOXYGEN_INPUTS@
        #  RECURSIVE = NO
        #  EXTRACT_ALL= NO
        #  EXTRACT_STATIC = NO
        #  HIDE_UNDOC_MEMBERS = YES
        #  HIDE_UNDOC_CLASSES = YES     
        #''')
    }

# sphinx versioning option. Review this later (issue to be fixed :
# https://github.com/CityOfZion/neon-js/issues/111)
# scv_root_ref = 'feature_branch'

# Tell sphinx what the primary language being documented is.
primary_domain = 'cpp'

# Tell sphinx what the pygments highlight language should be.
highlight_language = 'cpp'


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'@PROJECT_NAME_CAP@'
copyright = u@YEAR@ + u' - Siconos development team'
author = u'Siconos development team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '@SICONOS_VERSION@'
# The full version, including alpha/beta/rc tags.
release = '@SICONOS_VERSION@'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['**/*test*', '**/doxygen']

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'sphinx_rtd_theme'
html_theme = 'bootstrap'
# Note FP : using bootstrap theme results in (very) long
# times to generate doc from rst files.
html_theme_options = {
    # Tab name for entire site. (Default: "Site")
    'navbar_site_name': "Documentation",
    # A list of tuples containing pages or urls to link to.
    # Valid tuples should be in the following forms:
    #    (name, page)                 # a link to a page
    #    (name, "/aa/bb", 1)          # a link to an arbitrary relative url
    #    (name, "http://example.com", True) # arbitrary absolute url
    # Note the "1" or "True" value above as the third argument to indicate
    # an arbitrary url.
    'navbar_links': [
        ("Sources on github", "https://github.com/siconos/siconos",1),
        #("Quickstart", "getting_started/index"),
        ("Index", "genindex"),
        ],
    # Render the next and previous page links in navbar. (Default: true)
    'navbar_sidebarrel': True,

    # Render the current pages TOC in the navbar. (Default: true)
    'navbar_pagenav': True,

    # Tab name for the current pages TOC. (Default: "Page")
    'navbar_pagenav_name': "Page",

    # Global TOC depth for "site" navbar tab. (Default: 1)
    # Switching to -1 shows all levels.
    'globaltoc_depth': -1,

    # Include hidden TOCs in Site navbar?
    #
    # Note: If this is "false", you cannot have mixed ``:hidden:`` and
    # non-hidden ``toctree`` directives in the same page, or else the build
    # will break.
    #
    # Values: "true" (default) or "false"
    'globaltoc_includehidden': "true",

    # HTML navbar class (Default: "navbar") to attach to <div> element.
    # For black navbar, do "navbar navbar-inverse"
    'navbar_class': "navbar", # navbar-inverse",

    # Fix navigation bar to top of page?
    # Values: "true" (default) or "false"
    'navbar_fixed_top': "false",

    # Location of link to source.
    # Options are "nav" (default), "footer" or anything else to exclude.
    'source_link_position': "footer",

    # Bootswatch (http://bootswatch.com/) theme.
    #
    # Options are nothing (default) or the name of a valid theme
    # such as "cosmo" or "sandstone".
    #
    # The set of valid themes depend on the version of Bootstrap
    # that's used (the next config option).
    #
    # Currently, the supported themes are:
    # - Bootstrap 2: https://bootswatch.com/2
    # - Bootstrap 3: https://bootswatch.com/3
    # 'bootswatch_theme': "united",
    'bootswatch_theme': "sandstone",

    # Choose Bootstrap version.
    # Values: "3" (default) or "2" (in quotes)
    'bootstrap_version': "3",

}
# html_theme_options = {
#     'canonical_url': '',
#     'analytics_id': '',
#     'logo_only': False,
#     'display_version': True,
#     'prev_next_buttons_location': 'bottom',
#     #'vcs_pageview_mode': '',
#     # Toc options
#     'collapse_navigation': False,
#     'sticky_navigation': True,
#     'navigation_depth': 4,
#     #'includehidden': True,
#     #'titles_only': False,
# }
# Custom sidebar templates, maps document names to template names.
# html_sidebars = {
#    '**': ['menu.html', 'searchbox.html'],
#    'using/windows': ['windowssidebar.html', 'searchbox.html'],
# }

html_context = {
 "display_github": False, # Add 'Edit on Github' link instead of 'View page source'
# "last_updated": True,
# "commit": False,
    }
# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = ['@CMAKE_CURRENT_SOURCE_DIR@/sphinx/sphinx_themes']
#html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True



# -- Options for HTMLHelp output ------------------------------------------

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = '@PROJECT_NAME@doc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
    'preamble': '\usepackage{amsfonts}'

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, '@PROJECT_NAME@.tex', u'@PROJECT_NAME@ Documentation',
   u'Siconos development team', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, '@PROJECT_NAME@', u'@PROJECT_NAME@ Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, '@PROJECT_NAME@', u'@PROJECT_NAME@ Documentation',
   author, '@PROJECT_NAME@', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
#intersphinx_mapping = {'https://docs.python.org/': None}
intersphinx_mapping = {'python': ('https://docs.python.org', None),
                        'numpy': ('https://docs.scipy.org/doc/numpy/', None),
                        'scipy': ('https://docs.scipy.org/doc/scipy/reference/', None),
                        'matplotlib': ('https://matplotlib.org/', None)}


path_to_numerics = os.path.join('@CMAKE_SOURCE_DIR@', 'numerics')


def starting_with(prefixes):
    try:
        importlib.import_module('siconos.numerics')

        return ','.join([','.join([
            fun for fun in dir(importlib.import_module('siconos.numerics'))
            if fun.startswith(prefix)]) for prefix in prefixes])
    except:
        return ''

path_to_kernel = os.path.join('@CMAKE_SOURCE_DIR@', 'kernel')


def under_directory(dirs):
    try:
        importlib.import_module('siconos.kernel')
        return ','.join(
            [','.join([
                cls for cls in dir(importlib.import_module('siconos.kernel'))
                if os.path.exists(os.path.join(os.path.join(path_to_kernel, d), '{0}.hpp'.format(cls)))])
             for d in dirs])
    except:
        return ''


def source_read(app, docname, source):
    m = re.search(':eval:`(.*)`.*', source[0])
    if m is not None:
        r = eval(m.group(1))
        source[0] = re.sub(':eval:`(.*)`.*', r, source[0])


def setup(app):
    app.connect('source-read', source_read)

#if with_python_wrapper:
#    autodoc_member_order = 'bysource'
