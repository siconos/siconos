%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 14 220 581 621 
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[1.889764 20 div 0 0 1.889764 20 div neg 141 10 div 6212 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
750 530 4500 3180 setclipzone
-1 -1 200000 200000 setclipzone
[] 0 setdash
32 Setcolor
33 Setcolor
 (drawpoly) 10 [ -34]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
33 Setcolor
/absolu true def
32 Setcolor
[] 0 setdash
32 Setcolor
1 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
1 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 4002 [ 0]
[750 1943 752 1961 755 1978 757 1995 759 2013 761 2030 764 2047 766 2065 768 2082 770 2099 
773 2117 775 2134 777 2151 779 2169 782 2186 784 2203 786 2221 788 2238 791 2255 793 2273 
795 2290 797 2307 800 2325 802 2342 804 2359 806 2377 809 2394 811 2411 813 2429 815 2446 
818 2463 820 2481 822 2498 824 2515 827 2533 829 2550 831 2567 833 2585 836 2602 838 2619 
840 2637 842 2654 845 2671 847 2689 849 2706 851 2723 854 2741 856 2758 858 2775 860 2793 
863 2810 865 2827 867 2845 869 2862 872 2879 874 2897 876 2914 878 2931 881 2949 883 2966 
885 2983 887 3001 890 3018 892 3035 894 3053 896 3070 899 3087 901 3105 903 3122 905 3139 
908 3157 910 3174 912 3191 914 3208 917 3226 919 3243 921 3260 923 3278 926 3295 928 3312 
930 3330 932 3347 935 3364 937 3382 939 3399 941 3416 944 3434 946 3451 948 3468 950 3486 
953 3503 955 540 957 557 959 574 962 592 964 609 966 626 968 644 971 661 973 678 
975 696 977 713 980 730 982 747 984 765 986 782 989 799 991 817 993 834 995 851 
998 869 1000 886 1002 903 1004 921 1007 938 1009 955 1011 973 1013 990 1016 1007 1018 1025 
1020 1042 1022 1059 1025 1077 1027 1094 1029 1111 1031 1129 1034 1146 1036 1163 1038 1181 1040 1198 
1043 1215 1045 1233 1047 1250 1049 1267 1052 1285 1054 1302 1056 1319 1058 1337 1061 1354 1063 1371 
1065 1389 1067 1406 1070 1423 1072 1441 1074 1458 1076 1475 1079 1493 1081 1510 1083 1527 1085 1545 
1088 1562 1090 1579 1092 1597 1094 1614 1097 1631 1099 1649 1101 1666 1103 1683 1106 1701 1108 1718 
1110 1735 1112 1753 1115 1770 1117 1787 1119 1805 1121 1822 1124 1839 1126 1857 1128 1874 1130 1891 
1133 1909 1135 1926 1137 1943 1139 1961 1142 1978 1144 1995 1146 2013 1148 2030 1151 2047 1153 2065 
1155 2082 1157 2099 1160 2117 1162 2134 1164 2151 1166 2169 1169 2186 1171 2203 1173 2221 1175 2238 
1178 2255 1180 2273 1182 2290 1184 2307 1187 2325 1189 2342 1191 2359 1193 2377 1196 2394 1198 2411 
1200 2429 1202 2446 1205 2463 1207 2481 1209 2498 1211 2515 1214 2533 1216 2550 1218 2567 1220 2585 
1223 2602 1225 2619 1227 2637 1229 2654 1232 2671 1234 2689 1236 2706 1238 2723 1241 2741 1243 2758 
1245 2775 1247 2793 1250 2810 1252 2827 1254 2845 1256 2862 1259 2879 1261 2897 1263 2914 1265 2931 
1268 2949 1270 2966 1272 2983 1274 3001 1277 3018 1279 3035 1281 3053 1283 3070 1286 3087 1288 3105 
1290 3122 1292 3139 1295 3157 1297 3174 1299 3191 1301 3208 1304 3226 1306 3243 1308 3260 1310 3278 
1313 3295 1315 3312 1317 3330 1319 3347 1322 680 1324 697 1326 715 1328 732 1331 749 1333 767 
1335 784 1337 801 1340 819 1342 836 1344 853 1346 871 1349 888 1351 905 1353 923 1355 940 
1358 957 1360 975 1362 992 1364 1009 1367 1027 1369 1044 1371 1061 1373 1079 1376 1096 1378 1113 
1380 1131 1382 1148 1385 1165 1387 1183 1389 1200 1391 1217 1394 1234 1396 1252 1398 1269 1400 1286 
1403 1304 1405 1321 1407 1338 1409 1356 1412 1373 1414 1390 1416 1408 1418 1425 1421 1442 1423 1460 
1425 1477 1427 1494 1430 1512 1432 1529 1434 1546 1436 1564 1439 1581 1441 1598 1443 1616 1445 1633 
1448 1650 1450 1668 1452 1685 1454 1702 1457 1720 1459 1737 1461 1754 1463 1772 1466 1789 1468 1806 
1470 1824 1472 1841 1475 1858 1477 1876 1479 1893 1481 1910 1484 1928 1486 1945 1488 1962 1490 1980 
1493 1997 1495 2014 1497 2032 1499 2049 1502 2066 1504 2084 1506 2101 1508 2118 1511 2136 1513 2153 
1515 2170 1517 2188 1520 2205 1522 2222 1524 2240 1526 2257 1529 2274 1531 2292 1533 2309 1535 2326 
1538 2344 1540 2361 1542 2378 1544 2396 1547 2413 1549 2430 1551 2448 1553 2465 1556 2482 1558 2500 
1560 2517 1562 2534 1565 2552 1567 2569 1569 2586 1571 2604 1574 2621 1576 2638 1578 2656 1580 2673 
1583 2690 1585 2708 1587 2725 1589 2742 1592 2760 1594 2777 1596 2794 1598 2812 1601 2829 1603 2846 
1605 2864 1607 2881 1610 2898 1612 2916 1614 2933 1616 2950 1619 2968 1621 2985 1623 3002 1625 3020 
1628 3037 1630 3054 1632 3072 1634 3089 1637 3106 1639 3124 1641 3141 1643 3158 1646 3176 1648 3193 
1650 3210 1652 803 1655 820 1657 838 1659 855 1661 872 1664 890 1666 907 1668 924 1670 942 
1673 959 1675 976 1677 994 1679 1011 1682 1028 1684 1046 1686 1063 1688 1080 1691 1098 1693 1115 
1695 1132 1697 1150 1700 1167 1702 1184 1704 1202 1706 1219 1709 1236 1711 1254 1713 1271 1715 1288 
1718 1306 1720 1323 1722 1340 1724 1358 1727 1375 1729 1392 1731 1410 1733 1427 1736 1444 1738 1462 
1740 1479 1742 1496 1745 1514 1747 1531 1749 1548 1751 1566 1754 1583 1756 1600 1758 1618 1760 1635 
1763 1652 1765 1670 1767 1687 1769 1704 1772 1722 1774 1739 1776 1756 1778 1774 1781 1791 1783 1808 
1785 1826 1787 1843 1790 1860 1792 1878 1794 1895 1796 1912 1799 1930 1801 1947 1803 1964 1805 1982 
1808 1999 1810 2016 1812 2034 1814 2051 1817 2068 1819 2086 1821 2103 1823 2120 1826 2138 1828 2155 
1830 2172 1832 2190 1835 2207 1837 2224 1839 2242 1841 2259 1844 2276 1846 2294 1848 2311 1850 2328 
1853 2346 1855 2363 1857 2380 1859 2398 1862 2415 1864 2432 1866 2450 1868 2467 1871 2484 1873 2502 
1875 2519 1877 2536 1880 2554 1882 2571 1884 2588 1886 2606 1889 2623 1891 2640 1893 2658 1895 2675 
1898 2692 1900 2710 1902 2727 1904 2744 1907 2762 1909 2779 1911 2796 1913 2814 1916 2831 1918 2848 
1920 2866 1922 2883 1925 2900 1927 2918 1929 2935 1931 2952 1934 2970 1936 2987 1938 3004 1940 3021 
1943 3039 1945 3056 1947 3073 1949 3091 1952 911 1954 928 1956 945 1958 963 1961 980 1963 997 
1965 1015 1967 1032 1970 1049 1972 1067 1974 1084 1976 1101 1979 1119 1981 1136 1983 1153 1985 1171 
1988 1188 1990 1205 1992 1223 1994 1240 1997 1257 1999 1275 2001 1292 2003 1309 2006 1327 2008 1344 
2010 1361 2012 1379 2015 1396 2017 1413 2019 1431 2021 1448 2024 1465 2026 1483 2028 1500 2030 1517 
2033 1535 2035 1552 2037 1569 2039 1587 2042 1604 2044 1621 2046 1638 2048 1656 2051 1673 2053 1690 
2055 1708 2057 1725 2060 1742 2062 1760 2064 1777 2066 1794 2069 1812 2071 1829 2073 1846 2075 1864 
2078 1881 2080 1898 2082 1916 2084 1933 2087 1950 2089 1968 2091 1985 2093 2002 2096 2020 2098 2037 
2100 2054 2102 2072 2105 2089 2107 2106 2109 2124 2111 2141 2114 2158 2116 2176 2118 2193 2120 2210 
2123 2228 2125 2245 2127 2262 2129 2280 2132 2297 2134 2314 2136 2332 2138 2349 2141 2366 2143 2384 
2145 2401 2147 2418 2150 2436 2152 2453 2154 2470 2156 2488 2159 2505 2161 2522 2163 2540 2165 2557 
2168 2574 2170 2592 2172 2609 2174 2626 2177 2644 2179 2661 2181 2678 2183 2696 2186 2713 2188 2730 
2190 2748 2192 2765 2195 2782 2197 2800 2199 2817 2201 2834 2204 2852 2206 2869 2208 2886 2210 2904 
2213 2921 2215 2938 2217 2956 2219 2973 2222 1017 2224 1034 2226 1051 2228 1069 2231 1086 2233 1103 
2235 1121 2237 1138 2240 1155 2242 1173 2244 1190 2246 1207 2249 1225 2251 1242 2253 1259 2255 1277 
2258 1294 2260 1311 2262 1329 2264 1346 2267 1363 2269 1381 2271 1398 2273 1415 2276 1433 2278 1450 
2280 1467 2282 1485 2285 1502 2287 1519 2289 1537 2291 1554 2294 1571 2296 1589 2298 1606 2300 1623 
2303 1641 2305 1658 2307 1675 2309 1693 2312 1710 2314 1727 2316 1745 2318 1762 2321 1779 2323 1797 
2325 1814 2327 1831 2330 1849 2332 1866 2334 1883 2336 1901 2339 1918 2341 1935 2343 1953 2345 1970 
2348 1987 2350 2005 2352 2022 2354 2039 2357 2057 2359 2074 2361 2091 2363 2108 2366 2126 2368 2143 
2370 2160 2372 2178 2375 2195 2377 2212 2379 2230 2381 2247 2384 2264 2386 2282 2388 2299 2390 2316 
2393 2334 2395 2351 2397 2368 2399 2386 2402 2403 2404 2420 2406 2438 2408 2455 2411 2472 2413 2490 
2415 2507 2417 2524 2420 2542 2422 2559 2424 2576 2426 2594 2429 2611 2431 2628 2433 2646 2435 2663 
2438 2680 2440 2698 2442 2715 2444 2732 2447 2750 2449 2767 2451 2784 2453 2802 2456 2819 2458 2836 
2460 2854 2462 2871 2465 1108 2467 1126 2469 1143 2471 1160 2474 1178 2476 1195 2478 1212 2480 1230 
2483 1247 2485 1264 2487 1282 2489 1299 2492 1316 2494 1334 2496 1351 2498 1368 2501 1386 2503 1403 
2505 1420 2507 1438 2510 1455 2512 1472 2514 1490 2516 1507 2519 1524 2521 1542 2523 1559 2525 1576 
2528 1594 2530 1611 2532 1628 2534 1646 2537 1663 2539 1680 2541 1698 2543 1715 2546 1732 2548 1750 
2550 1767 2552 1784 2555 1802 2557 1819 2559 1836 2561 1854 2564 1871 2566 1888 2568 1906 2570 1923 
2573 1940 2575 1958 2577 1975 2579 1992 2582 2010 2584 2027 2586 2044 2588 2062 2591 2079 2593 2096 
2595 2114 2597 2131 2600 2148 2602 2166 2604 2183 2606 2200 2609 2218 2611 2235 2613 2252 2615 2270 
2618 2287 2620 2304 2622 2322 2624 2339 2627 2356 2629 2374 2631 2391 2633 2408 2636 2426 2638 2443 
2640 2460 2642 2478 2645 2495 2647 2512 2649 2530 2651 2547 2654 2564 2656 2582 2658 2599 2660 2616 
2663 2634 2665 2651 2667 2668 2669 2685 2672 2703 2674 2720 2676 2737 2678 2755 2681 2772 2683 1197 
2685 1215 2687 1232 2690 1249 2692 1267 2694 1284 2696 1301 2699 1319 2701 1336 2703 1353 2705 1371 
2708 1388 2710 1405 2712 1423 2714 1440 2717 1457 2719 1475 2721 1492 2723 1509 2726 1527 2728 1544 
2730 1561 2732 1579 2735 1596 2737 1613 2739 1631 2741 1648 2744 1665 2746 1683 2748 1700 2750 1717 
2753 1735 2755 1752 2757 1769 2759 1787 2762 1804 2764 1821 2766 1839 2768 1856 2771 1873 2773 1891 
2775 1908 2777 1925 2780 1943 2782 1960 2784 1977 2786 1995 2789 2012 2791 2029 2793 2047 2795 2064 
2798 2081 2800 2099 2802 2116 2804 2133 2807 2151 2809 2168 2811 2185 2813 2203 2816 2220 2818 2237 
2820 2255 2822 2272 2825 2289 2827 2307 2829 2324 2831 2341 2834 2359 2836 2376 2838 2393 2840 2411 
2843 2428 2845 2445 2847 2463 2849 2480 2852 2497 2854 2515 2856 2532 2858 2549 2861 2567 2863 2584 
2865 2601 2867 2619 2870 2636 2872 2653 2874 2671 2876 2688 2879 1273 2881 1291 2883 1308 2885 1325 
2888 1343 2890 1360 2892 1377 2894 1395 2897 1412 2899 1429 2901 1447 2903 1464 2906 1481 2908 1499 
2910 1516 2912 1533 2915 1551 2917 1568 2919 1585 2921 1603 2924 1620 2926 1637 2928 1655 2930 1672 
2933 1689 2935 1707 2937 1724 2939 1741 2942 1759 2944 1776 2946 1793 2948 1811 2951 1828 2953 1845 
2955 1863 2957 1880 2960 1897 2962 1915 2964 1932 2966 1949 2969 1966 2971 1984 2973 2001 2975 2018 
2978 2036 2980 2053 2982 2070 2984 2088 2987 2105 2989 2122 2991 2140 2993 2157 2996 2174 2998 2192 
3000 2209 3002 2226 3005 2244 3007 2261 3009 2278 3011 2296 3014 2313 3016 2330 3018 2348 3020 2365 
3023 2382 3025 2400 3027 2417 3029 2434 3032 2452 3034 2469 3036 2486 3038 2504 3041 2521 3043 2538 
3045 2556 3047 2573 3050 2590 3052 2608 3054 1345 3056 1363 3059 1380 3061 1397 3063 1415 3065 1432 
3068 1449 3070 1467 3072 1484 3074 1501 3077 1519 3079 1536 3081 1553 3083 1571 3086 1588 3088 1605 
3090 1623 3092 1640 3095 1657 3097 1675 3099 1692 3101 1709 3104 1727 3106 1744 3108 1761 3110 1779 
3113 1796 3115 1813 3117 1831 3119 1848 3122 1865 3124 1883 3126 1900 3128 1917 3131 1935 3133 1952 
3135 1969 3137 1987 3140 2004 3142 2021 3144 2039 3146 2056 3149 2073 3151 2091 3153 2108 3155 2125 
3158 2143 3160 2160 3162 2177 3164 2195 3167 2212 3169 2229 3171 2247 3173 2264 3176 2281 3178 2299 
3180 2316 3182 2333 3185 2351 3187 2368 3189 2385 3191 2403 3194 2420 3196 2437 3198 2455 3200 2472 
3203 2489 3205 2507 3207 2524 3209 2541 3212 1405 3214 1423 3216 1440 3218 1457 3221 1475 3223 1492 
3225 1509 3227 1527 3230 1544 3232 1561 3234 1579 3236 1596 3239 1613 3241 1631 3243 1648 3245 1665 
3248 1683 3250 1700 3252 1717 3254 1735 3257 1752 3259 1769 3261 1787 3263 1804 3266 1821 3268 1839 
3270 1856 3272 1873 3275 1891 3277 1908 3279 1925 3281 1943 3284 1960 3286 1977 3288 1995 3290 2012 
3293 2029 3295 2046 3297 2064 3299 2081 3302 2098 3304 2116 3306 2133 3308 2150 3311 2168 3313 2185 
3315 2202 3317 2220 3320 2237 3322 2254 3324 2272 3326 2289 3329 2306 3331 2324 3333 2341 3335 2358 
3338 2376 3340 2393 3342 2410 3344 2428 3347 2445 3349 2462 3351 2480 3353 1461 3356 1478 3358 1495 
3360 1513 3362 1530 3365 1547 3367 1565 3369 1582 3371 1599 3374 1617 3376 1634 3378 1651 3380 1669 
3383 1686 3385 1703 3387 1721 3389 1738 3392 1755 3394 1772 3396 1790 3398 1807 3401 1824 3403 1842 
3405 1859 3407 1876 3410 1894 3412 1911 3414 1928 3416 1946 3419 1963 3421 1980 3423 1998 3425 2015 
3428 2032 3430 2050 3432 2067 3434 2084 3437 2102 3439 2119 3441 2136 3443 2154 3446 2171 3448 2188 
3450 2206 3452 2223 3455 2240 3457 2258 3459 2275 3461 2292 3464 2310 3466 2327 3468 2344 3470 2362 
3473 2379 3475 2396 3477 2414 3479 2431 3482 1504 3484 1522 3486 1539 3488 1556 3491 1574 3493 1591 
3495 1608 3497 1626 3500 1643 3502 1660 3504 1678 3506 1695 3509 1712 3511 1730 3513 1747 3515 1764 
3518 1782 3520 1799 3522 1816 3524 1834 3527 1851 3529 1868 3531 1886 3533 1903 3536 1920 3538 1938 
3540 1955 3542 1972 3545 1990 3547 2007 3549 2024 3551 2042 3554 2059 3556 2076 3558 2094 3560 2111 
3563 2128 3565 2146 3567 2163 3569 2180 3572 2198 3574 2215 3576 2232 3578 2250 3581 2267 3583 2284 
3585 2302 3587 2319 3590 2336 3592 2354 3594 2371 3596 1559 3599 1576 3601 1593 3603 1611 3605 1628 
3608 1645 3610 1662 3612 1680 3614 1697 3617 1714 3619 1732 3621 1749 3623 1766 3626 1784 3628 1801 
3630 1818 3632 1836 3635 1853 3637 1870 3639 1888 3641 1905 3644 1922 3646 1940 3648 1957 3650 1974 
3653 1992 3655 2009 3657 2026 3659 2044 3662 2061 3664 2078 3666 2096 3668 2113 3671 2130 3673 2148 
3675 2165 3677 2182 3680 2200 3682 2217 3684 2234 3686 2252 3689 2269 3691 2286 3693 2304 3695 2321 
3698 2338 3700 1588 3702 1605 3704 1622 3707 1640 3709 1657 3711 1674 3713 1692 3716 1709 3718 1726 
3720 1744 3722 1761 3725 1778 3727 1796 3729 1813 3731 1830 3734 1848 3736 1865 3738 1882 3740 1900 
3743 1917 3745 1934 3747 1952 3749 1969 3752 1986 3754 2004 3756 2021 3758 2038 3761 2056 3763 2073 
3765 2090 3767 2108 3770 2125 3772 2142 3774 2160 3776 2177 3779 2194 3781 2212 3783 2229 3785 2246 
3788 2264 3790 2281 3792 2298 3794 1624 3797 1641 3799 1658 3801 1676 3803 1693 3806 1710 3808 1728 
3810 1745 3812 1762 3815 1780 3817 1797 3819 1814 3821 1832 3824 1849 3826 1866 3828 1884 3830 1901 
3833 1918 3835 1936 3837 1953 3839 1970 3842 1988 3844 2005 3846 2022 3848 2040 3851 2057 3853 2074 
3855 2092 3857 2109 3860 2126 3862 2144 3864 2161 3866 2178 3869 2196 3871 2213 3873 2230 3875 2248 
3878 1669 3880 1687 3882 1704 3884 1721 3887 1739 3889 1756 3891 1773 3893 1791 3896 1808 3898 1825 
3900 1843 3902 1860 3905 1877 3907 1895 3909 1912 3911 1929 3914 1947 3916 1964 3918 1981 3920 1999 
3923 2016 3925 2033 3927 2051 3929 2068 3932 2085 3934 2103 3936 2120 3938 2137 3941 2155 3943 2172 
3945 2189 3947 2207 3950 2224 3952 1691 3954 1708 3956 1725 3959 1743 3961 1760 3963 1777 3965 1795 
3968 1812 3970 1829 3972 1847 3974 1864 3977 1881 3979 1899 3981 1916 3983 1933 3986 1951 3988 1968 
3990 1985 3992 2003 3995 2020 3997 2037 3999 2055 4001 2072 4004 2089 4006 2107 4008 2124 4010 2141 
4013 2159 4015 2176 4017 2193 4019 1718 4022 1736 4024 1753 4026 1770 4028 1788 4031 1805 4033 1822 
4035 1840 4037 1857 4040 1874 4042 1892 4044 1909 4046 1926 4049 1944 4051 1961 4053 1978 4055 1996 
4058 2013 4060 2030 4062 2048 4064 2065 4067 2082 4069 2100 4071 2117 4073 2134 4076 2152 4078 2169 
4080 1740 4082 1758 4085 1775 4087 1792 4089 1810 4091 1827 4094 1844 4096 1862 4098 1879 4100 1896 
4103 1914 4105 1931 4107 1948 4109 1966 4112 1983 4114 2000 4116 2018 4118 2035 4121 2052 4123 2070 
4125 2087 4127 2104 4130 2122 4132 2139 4134 1767 4136 1785 4139 1802 4141 1819 4143 1837 4145 1854 
4148 1871 4150 1889 4152 1906 4154 1923 4157 1941 4159 1958 4161 1975 4163 1993 4166 2010 4168 2027 
4170 2045 4172 2062 4175 2079 4177 2097 4179 2114 4181 1790 4184 1807 4186 1824 4188 1842 4190 1859 
4193 1876 4195 1894 4197 1911 4199 1928 4202 1946 4204 1963 4206 1980 4208 1998 4211 2015 4213 2032 
4215 2050 4217 2067 4220 2084 4222 2102 4224 1801 4226 1818 4229 1835 4231 1853 4233 1870 4235 1887 
4238 1905 4240 1922 4242 1939 4244 1957 4247 1974 4249 1991 4251 2009 4253 2026 4256 2043 4258 2061 
4260 2078 4262 2095 4265 1807 4267 1824 4269 1841 4271 1858 4274 1876 4276 1893 4278 1910 4280 1928 
4283 1945 4285 1962 4287 1980 4289 1997 4292 2014 4294 2032 4296 2049 4298 2066 4301 1833 4303 1850 
4305 1867 4307 1885 4310 1902 4312 1919 4314 1937 4316 1954 4319 1971 4321 1988 4323 2006 4325 2023 
4328 2040 4330 2058 4332 1840 4334 1858 4337 1875 4339 1892 4341 1910 4343 1927 4346 1944 4348 1962 
4350 1979 4352 1996 4355 2014 4357 2031 4359 2048 4361 1849 4364 1866 4366 1884 4368 1901 4370 1918 
4373 1936 4375 1953 4377 1970 4379 1988 4382 2005 4384 2022 4386 2040 4388 1857 4391 1874 4393 1891 
4395 1909 4397 1926 4400 1943 4402 1961 4404 1978 4406 1995 4409 2013 4411 2030 4413 1865 4415 1883 
4418 1900 4420 1917 4422 1935 4424 1952 4427 1969 4429 1987 4431 2004 4433 2021 4436 1873 4438 1891 
4440 1908 4442 1925 4445 1943 4447 1960 4449 1977 4451 1995 4454 1897 4456 1915 4458 1932 4460 1949 
4463 1967 4465 1984 4467 2001 4469 1891 4472 1909 4474 1926 4476 1943 4478 1961 4481 1978 4483 1995 
4485 1897 4487 1914 4490 1931 4492 1949 4494 1966 4496 1983 4499 1907 4501 1925 4503 1942 4505 1959 
4508 1977 4510 1913 4512 1931 4514 1948 4517 1965 4519 1983 4521 1908 4523 1925 4526 1943 4528 1960 
4530 1928 4532 1946 4535 1963 4537 1926 4539 1943 4541 1960 4544 1928 4546 1945 4548 1963 4550 1926 
4553 1943 4555 1961 4557 1928 4559 1945 4562 1963 4564 1926 4566 1943 4568 1943 4571 1943 4573 1943 
4575 1943 4577 1943 4580 1943 4582 1943 4584 1943 4586 1943 4589 1943 4591 1943 4593 1943 4595 1943 
4598 1943 4600 1943 4602 1943 4604 1943 4607 1943 4609 1943 4611 1943 4613 1943 4616 1943 4618 1943 
4620 1943 4622 1943 4625 1943 4627 1943 4629 1943 4631 1943 4634 1943 4636 1943 4638 1943 4640 1943 
4643 1943 4645 1943 4647 1943 4649 1943 4652 1943 4654 1943 4656 1943 4658 1943 4661 1943 4663 1943 
4665 1943 4667 1943 4670 1943 4672 1943 4674 1943 4676 1943 4679 1943 4681 1943 4683 1943 4685 1943 
4688 1943 4690 1943 4692 1943 4694 1943 4697 1943 4699 1943 4701 1943 4703 1943 4706 1943 4708 1943 
4710 1943 4712 1943 4715 1943 4717 1943 4719 1943 4721 1943 4724 1943 4726 1943 4728 1943 4730 1943 
4733 1943 4735 1943 4737 1943 4739 1943 4742 1943 4744 1943 4746 1943 4748 1943 4751 1943 4753 1943 
4755 1943 4757 1943 4760 1943 4762 1943 4764 1943 4766 1943 4769 1943 4771 1943 4773 1943 4775 1943 
4778 1943 4780 1943 4782 1943 4784 1943 4787 1943 4789 1943 4791 1943 4793 1943 4796 1943 4798 1943 
4800 1943 4802 1943 4805 1943 4807 1943 4809 1943 4811 1943 4814 1943 4816 1943 4818 1943 4820 1943 
4823 1943 4825 1943 4827 1943 4829 1943 4832 1943 4834 1943 4836 1943 4838 1943 4841 1943 4843 1943 
4845 1943 4847 1943 4850 1943 4852 1943 4854 1943 4856 1943 4859 1943 4861 1943 4863 1943 4865 1943 
4868 1943 4870 1943 4872 1943 4874 1943 4877 1943 4879 1943 4881 1943 4883 1943 4886 1943 4888 1943 
4890 1943 4892 1943 4895 1943 4897 1943 4899 1943 4901 1943 4904 1943 4906 1943 4908 1943 4910 1943 
4913 1943 4915 1943 4917 1943 4919 1943 4922 1943 4924 1943 4926 1943 4928 1943 4931 1943 4933 1943 
4935 1943 4937 1943 4940 1943 4942 1943 4944 1943 4946 1943 4949 1943 4951 1943 4953 1943 4955 1943 
4958 1943 4960 1943 4962 1943 4964 1943 4967 1943 4969 1943 4971 1943 4973 1943 4976 1943 4978 1943 
4980 1943 4982 1943 4985 1943 4987 1943 4989 1943 4991 1943 4994 1943 4996 1943 4998 1943 5000 1943 
5003 1943 5005 1943 5007 1943 5009 1943 5012 1943 5014 1943 5016 1943 5018 1943 5021 1943 5023 1943 
5025 1943 5027 1943 5030 1943 5032 1943 5034 1943 5036 1943 5039 1943 5041 1943 5043 1943 5045 1943 
5048 1943 5050 1943 5052 1943 5054 1943 5057 1943 5059 1943 5061 1943 5063 1943 5066 1943 5068 1943 
5070 1943 5072 1943 5075 1943 5077 1943 5079 1943 5081 1943 5084 1943 5086 1943 5088 1943 5090 1943 
5093 1943 5095 1943 5097 1943 5099 1943 5102 1943 5104 1943 5106 1943 5108 1943 5111 1943 5113 1943 
5115 1943 5117 1943 5120 1943 5122 1943 5124 1943 5126 1943 5129 1943 5131 1943 5133 1943 5135 1943 
5138 1943 5140 1943 5142 1943 5144 1943 5147 1943 5149 1943 5151 1943 5153 1943 5156 1943 5158 1943 
5160 1943 5162 1943 5165 1943 5167 1943 5169 1943 5171 1943 5174 1943 5176 1943 5178 1943 5180 1943 
5183 1943 5185 1943 5187 1943 5189 1943 5192 1943 5194 1943 5196 1943 5198 1943 5201 1943 5203 1943 
5205 1943 5207 1943 5210 1943 5212 1943 5214 1943 5216 1943 5219 1943 5221 1943 5223 1943 5225 1943 
5228 1943 5230 1943 5232 1943 5234 1943 5237 1943 5239 1943 5241 1943 5243 1943 5246 1943 5248 1943 
5250 1943 
] dogrey 
1 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0) 723 3873 0  0.00 [723 3773 55 99] Show
%Latex:\myput{723}{367}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(1) 1173 3873 0  0.00 [1173 3773 55 99] Show
%Latex:\myput{1173}{367}{5}{1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1200 3710 1200 3773 
] dogrey 
32 Setcolor
32 Setcolor
(2) 1623 3873 0  0.00 [1623 3773 55 99] Show
%Latex:\myput{1623}{367}{5}{2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1650 3710 1650 3773 
] dogrey 
32 Setcolor
32 Setcolor
(3) 2073 3873 0  0.00 [2073 3773 55 99] Show
%Latex:\myput{2073}{367}{5}{3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2100 3710 2100 3773 
] dogrey 
32 Setcolor
32 Setcolor
(4) 2523 3873 0  0.00 [2523 3773 55 99] Show
%Latex:\myput{2523}{367}{5}{4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2550 3710 2550 3773 
] dogrey 
32 Setcolor
32 Setcolor
(5) 2973 3873 0  0.00 [2973 3773 55 99] Show
%Latex:\myput{2973}{367}{5}{5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3000 3710 3000 3773 
] dogrey 
32 Setcolor
32 Setcolor
(6) 3423 3873 0  0.00 [3423 3773 55 99] Show
%Latex:\myput{3423}{367}{5}{6}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3450 3710 3450 3773 
] dogrey 
32 Setcolor
32 Setcolor
(7) 3873 3873 0  0.00 [3873 3773 55 99] Show
%Latex:\myput{3873}{367}{5}{7}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3900 3710 3900 3773 
] dogrey 
32 Setcolor
32 Setcolor
(8) 4323 3873 0  0.00 [4323 3773 55 99] Show
%Latex:\myput{4323}{367}{5}{8}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4350 3710 4350 3773 
] dogrey 
32 Setcolor
32 Setcolor
(9) 4773 3873 0  0.00 [4773 3773 55 99] Show
%Latex:\myput{4773}{367}{5}{9}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4800 3710 4800 3773 
] dogrey 
32 Setcolor
32 Setcolor
(10) 5195 3873 0  0.00 [5195 3773 111 99] Show
%Latex:\myput{5195}{367}{5}{10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[975 3710 975 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1200 3710 1200 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1425 3710 1425 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1650 3710 1650 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1875 3710 1875 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2100 3710 2100 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2325 3710 2325 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2550 3710 2550 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2775 3710 2775 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3225 3710 3225 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3450 3710 3450 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3675 3710 3675 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3900 3710 3900 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4125 3710 4125 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4350 3710 4350 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4575 3710 4575 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4800 3710 4800 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[5025 3710 5025 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(-5) 590 3748 0  0.00 [590 3648 88 99] Show
%Latex:\myput{590}{492}{5}{-5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
32 Setcolor
32 Setcolor
(-4) 590 3395 0  0.00 [590 3295 88 99] Show
%Latex:\myput{590}{845}{5}{-4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3357 690 3357 
] dogrey 
32 Setcolor
32 Setcolor
(-3) 590 3041 0  0.00 [590 2941 88 99] Show
%Latex:\myput{590}{1199}{5}{-3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3003 690 3003 
] dogrey 
32 Setcolor
32 Setcolor
(-2) 590 2688 0  0.00 [590 2588 88 99] Show
%Latex:\myput{590}{1552}{5}{-2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
32 Setcolor
32 Setcolor
(-1) 590 2335 0  0.00 [590 2235 88 99] Show
%Latex:\myput{590}{1905}{5}{-1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2297 690 2297 
] dogrey 
32 Setcolor
32 Setcolor
(0) 623 1981 0  0.00 [623 1881 55 99] Show
%Latex:\myput{623}{2259}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1943 690 1943 
] dogrey 
32 Setcolor
32 Setcolor
(1) 623 1628 0  0.00 [623 1528 55 99] Show
%Latex:\myput{623}{2612}{5}{1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
32 Setcolor
32 Setcolor
(2) 623 1275 0  0.00 [623 1175 55 99] Show
%Latex:\myput{623}{2965}{5}{2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1237 690 1237 
] dogrey 
32 Setcolor
32 Setcolor
(3) 623 921 0  0.00 [623 821 55 99] Show
%Latex:\myput{623}{3319}{5}{3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 883 690 883 
] dogrey 
32 Setcolor
32 Setcolor
(4) 623 568 0  0.00 [623 468 55 99] Show
%Latex:\myput{623}{3672}{5}{4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3533 705 3533 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3357 705 3357 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3180 705 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3003 705 3003 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2827 705 2827 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2650 705 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2473 705 2473 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2297 705 2297 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1943 705 1943 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1767 705 1767 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1590 705 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1413 705 1413 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1237 705 1237 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1060 705 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 883 705 883 
] dogrey 
 (drawsegs) 4 [ 32]
[750 707 705 707 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 5250 3710 
] dogrey 
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 530 
] dogrey 
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 


