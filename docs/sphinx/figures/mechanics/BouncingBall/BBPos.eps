%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 14 220 581 621 
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[1.889764 20 div 0 0 1.889764 20 div neg 141 10 div 6212 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
750 530 4500 3180 setclipzone
-1 -1 200000 200000 setclipzone
[] 0 setdash
32 Setcolor
33 Setcolor
 (drawpoly) 10 [ -34]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
33 Setcolor
/absolu true def
32 Setcolor
[] 0 setdash
32 Setcolor
1 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
1 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 4002 [ 0]
[750 530 752 530 755 531 757 533 759 535 761 538 764 542 766 546 768 551 770 556 
773 562 775 569 777 577 779 585 782 594 784 603 786 613 788 624 791 635 793 647 
795 660 797 673 800 687 802 702 804 717 806 733 809 750 811 767 813 785 815 803 
818 822 820 842 822 863 824 884 827 906 829 928 831 951 833 975 836 999 838 1024 
840 1050 842 1076 845 1103 847 1131 849 1159 851 1188 854 1218 856 1248 858 1279 860 1310 
863 1342 865 1375 867 1409 869 1443 872 1478 874 1513 876 1549 878 1586 881 1623 883 1661 
885 1700 887 1739 890 1779 892 1820 894 1861 896 1903 899 1946 901 1989 903 2033 905 2077 
908 2122 910 2168 912 2215 914 2262 917 2309 919 2358 921 2407 923 2457 926 2507 928 2558 
930 2610 932 2662 935 2715 937 2769 939 2823 941 2878 944 2933 946 2990 948 3046 950 3104 
953 3162 955 3165 957 3113 959 3061 962 3010 964 2960 966 2910 968 2861 971 2812 973 2765 
975 2718 977 2671 980 2625 982 2580 984 2536 986 2492 989 2449 991 2406 993 2364 995 2323 
998 2282 1000 2242 1002 2203 1004 2164 1007 2126 1009 2089 1011 2052 1013 2016 1016 1981 1018 1946 
1020 1912 1022 1878 1025 1845 1027 1813 1029 1782 1031 1751 1034 1721 1036 1691 1038 1662 1040 1634 
1043 1606 1045 1579 1047 1553 1049 1527 1052 1502 1054 1478 1056 1454 1058 1431 1061 1409 1063 1387 
1065 1366 1067 1345 1070 1325 1072 1306 1074 1288 1076 1270 1079 1253 1081 1236 1083 1220 1085 1205 
1088 1190 1090 1176 1092 1163 1094 1150 1097 1138 1099 1127 1101 1116 1103 1106 1106 1097 1108 1088 
1110 1080 1112 1072 1115 1066 1117 1059 1119 1054 1121 1049 1124 1045 1126 1041 1128 1038 1130 1036 
1133 1034 1135 1033 1137 1033 1139 1033 1142 1034 1144 1036 1146 1038 1148 1041 1151 1045 1153 1049 
1155 1054 1157 1059 1160 1066 1162 1072 1164 1080 1166 1088 1169 1097 1171 1106 1173 1116 1175 1127 
1178 1138 1180 1150 1182 1163 1184 1176 1187 1190 1189 1205 1191 1220 1193 1236 1196 1253 1198 1270 
1200 1288 1202 1306 1205 1325 1207 1345 1209 1366 1211 1387 1214 1409 1216 1431 1218 1454 1220 1478 
1223 1502 1225 1527 1227 1553 1229 1579 1232 1606 1234 1634 1236 1662 1238 1691 1241 1721 1243 1751 
1245 1782 1247 1813 1250 1845 1252 1878 1254 1912 1256 1946 1259 1981 1261 2016 1263 2052 1265 2089 
1268 2126 1270 2164 1272 2203 1274 2242 1277 2282 1279 2323 1281 2364 1283 2406 1286 2449 1288 2492 
1290 2536 1292 2580 1295 2625 1297 2671 1299 2718 1301 2765 1304 2812 1306 2861 1308 2910 1310 2960 
1313 3010 1315 3061 1317 3113 1319 3165 1322 3168 1324 3121 1326 3074 1328 3028 1331 2983 1333 2939 
1335 2895 1337 2852 1340 2809 1342 2768 1344 2726 1346 2686 1349 2646 1351 2607 1353 2568 1355 2530 
1358 2493 1360 2456 1362 2420 1364 2385 1367 2350 1369 2316 1371 2283 1373 2250 1376 2218 1378 2186 
1380 2156 1382 2125 1385 2096 1387 2067 1389 2039 1391 2011 1394 1984 1396 1958 1398 1932 1400 1908 
1403 1883 1405 1860 1407 1837 1409 1814 1412 1792 1414 1771 1416 1751 1418 1731 1421 1712 1423 1694 
1425 1676 1427 1659 1430 1642 1432 1626 1434 1611 1436 1597 1439 1583 1441 1569 1443 1557 1445 1545 
1448 1534 1450 1523 1452 1513 1454 1504 1457 1495 1459 1487 1461 1479 1463 1473 1466 1466 1468 1461 
1470 1456 1472 1452 1475 1449 1477 1446 1479 1443 1481 1442 1484 1441 1486 1441 1488 1441 1490 1442 
1493 1444 1495 1446 1497 1449 1499 1453 1502 1457 1504 1462 1506 1468 1508 1474 1511 1481 1513 1488 
1515 1497 1517 1505 1520 1515 1522 1525 1524 1536 1526 1547 1529 1559 1531 1572 1533 1585 1535 1599 
1538 1614 1540 1629 1542 1645 1544 1662 1547 1679 1549 1697 1551 1716 1553 1735 1556 1755 1558 1776 
1560 1797 1562 1819 1565 1841 1567 1864 1569 1888 1571 1912 1574 1938 1576 1963 1578 1990 1580 2017 
1583 2044 1585 2073 1587 2102 1589 2131 1592 2162 1594 2193 1596 2224 1598 2256 1601 2289 1603 2323 
1605 2357 1607 2392 1610 2427 1612 2463 1614 2500 1616 2538 1619 2576 1621 2614 1623 2654 1625 2694 
1628 2735 1630 2776 1632 2818 1634 2861 1637 2904 1639 2948 1641 2992 1643 3038 1646 3083 1648 3130 
1650 3177 1652 3180 1655 3137 1657 3095 1659 3054 1661 3014 1664 2974 1666 2935 1668 2896 1670 2858 
1673 2821 1675 2784 1677 2749 1679 2713 1682 2679 1684 2645 1686 2611 1688 2579 1691 2547 1693 2515 
1695 2484 1697 2454 1700 2425 1702 2396 1704 2368 1706 2341 1709 2314 1711 2288 1713 2262 1715 2237 
1718 2213 1720 2189 1722 2166 1724 2144 1727 2122 1729 2101 1731 2081 1733 2061 1736 2042 1738 2024 
1740 2006 1742 1989 1745 1973 1747 1957 1749 1942 1751 1927 1754 1914 1756 1900 1758 1888 1760 1876 
1763 1865 1765 1854 1767 1844 1769 1835 1772 1826 1774 1818 1776 1811 1778 1804 1781 1798 1783 1793 
1785 1788 1787 1784 1790 1781 1792 1778 1794 1776 1796 1774 1799 1773 1801 1773 1803 1774 1805 1775 
1808 1776 1810 1779 1812 1782 1814 1786 1817 1790 1819 1795 1821 1801 1823 1807 1826 1814 1828 1821 
1830 1830 1832 1839 1835 1848 1837 1858 1839 1869 1841 1881 1844 1893 1846 1906 1848 1919 1850 1933 
1853 1948 1855 1964 1857 1980 1859 1996 1862 2014 1864 2032 1866 2050 1868 2070 1871 2090 1873 2110 
1875 2131 1877 2153 1880 2176 1882 2199 1884 2223 1886 2247 1889 2273 1891 2298 1893 2325 1895 2352 
1898 2380 1900 2408 1902 2437 1904 2467 1907 2497 1909 2528 1911 2560 1913 2592 1916 2625 1918 2659 
1920 2693 1922 2728 1925 2764 1927 2800 1929 2837 1931 2874 1934 2912 1936 2951 1938 2991 1940 3031 
1943 3071 1945 3113 1947 3155 1949 3198 1952 3200 1954 3161 1956 3124 1958 3086 1961 3050 1963 3014 
1965 2979 1967 2945 1970 2911 1972 2878 1974 2845 1976 2813 1979 2782 1981 2751 1983 2721 1985 2692 
1988 2663 1990 2635 1992 2608 1994 2581 1997 2555 1999 2530 2001 2505 2003 2481 2006 2457 2008 2435 
2010 2412 2012 2391 2015 2370 2017 2350 2019 2330 2021 2311 2024 2293 2026 2276 2028 2259 2030 2242 
2033 2227 2035 2212 2037 2197 2039 2184 2042 2171 2044 2158 2046 2146 2048 2135 2051 2125 2053 2115 
2055 2106 2057 2097 2060 2090 2062 2082 2064 2076 2066 2070 2069 2065 2071 2060 2073 2056 2075 2053 
2078 2050 2080 2048 2082 2047 2084 2046 2087 2046 2089 2047 2091 2048 2093 2050 2096 2052 2098 2055 
2100 2059 2102 2064 2105 2069 2107 2075 2109 2081 2111 2088 2114 2096 2116 2104 2118 2113 2120 2123 
2123 2133 2125 2144 2127 2156 2129 2168 2132 2181 2134 2195 2136 2209 2138 2224 2141 2240 2143 2256 
2145 2273 2147 2290 2150 2308 2152 2327 2154 2346 2156 2366 2159 2387 2161 2409 2163 2431 2165 2453 
2168 2477 2170 2501 2172 2525 2174 2551 2177 2577 2179 2603 2181 2630 2183 2658 2186 2687 2188 2716 
2190 2746 2192 2776 2195 2807 2197 2839 2199 2872 2201 2905 2204 2938 2206 2973 2208 3008 2210 3044 
2213 3080 2215 3117 2217 3155 2219 3193 2222 3195 2224 3160 2226 3127 2228 3093 2231 3061 2233 3029 
2235 2998 2237 2967 2240 2938 2242 2908 2244 2880 2246 2852 2249 2825 2251 2798 2253 2772 2255 2747 
2258 2722 2260 2698 2262 2675 2264 2652 2267 2630 2269 2608 2271 2588 2273 2567 2276 2548 2278 2529 
2280 2511 2282 2493 2285 2477 2287 2460 2289 2445 2291 2430 2294 2416 2296 2402 2298 2389 2300 2377 
2303 2365 2305 2354 2307 2343 2309 2334 2312 2325 2314 2316 2316 2308 2318 2301 2321 2295 2323 2289 
2325 2284 2327 2279 2330 2275 2332 2272 2334 2270 2336 2268 2339 2266 2341 2266 2343 2266 2345 2266 
2348 2268 2350 2270 2352 2272 2354 2276 2357 2280 2359 2284 2361 2289 2363 2295 2366 2302 2368 2309 
2370 2317 2372 2325 2375 2334 2377 2344 2379 2355 2381 2366 2384 2377 2386 2390 2388 2403 2390 2416 
2393 2431 2395 2446 2397 2461 2399 2478 2402 2494 2404 2512 2406 2530 2408 2549 2411 2569 2413 2589 
2415 2610 2417 2631 2420 2653 2422 2676 2424 2699 2426 2723 2429 2748 2431 2774 2433 2800 2435 2826 
2438 2854 2440 2881 2442 2910 2444 2939 2447 2969 2449 3000 2451 3031 2453 3063 2456 3095 2458 3129 
2460 3162 2462 3197 2465 3199 2467 3168 2469 3137 2471 3108 2474 3079 2476 3050 2478 3022 2480 2995 
2483 2969 2485 2943 2487 2918 2489 2894 2492 2870 2494 2846 2496 2824 2498 2802 2501 2781 2503 2760 
2505 2740 2507 2721 2510 2702 2512 2684 2514 2667 2516 2650 2519 2634 2521 2619 2523 2604 2525 2590 
2528 2577 2530 2564 2532 2552 2534 2540 2537 2529 2539 2519 2541 2510 2543 2501 2546 2493 2548 2485 
2550 2478 2552 2472 2555 2466 2557 2461 2559 2457 2561 2453 2564 2450 2566 2448 2568 2446 2570 2445 
2573 2444 2575 2445 2577 2445 2579 2447 2582 2449 2584 2452 2586 2455 2588 2460 2591 2464 2593 2470 
2595 2476 2597 2482 2600 2490 2602 2498 2604 2506 2606 2516 2609 2526 2611 2536 2613 2548 2615 2560 
2618 2572 2620 2585 2622 2599 2624 2614 2627 2629 2629 2645 2631 2661 2633 2678 2636 2696 2638 2714 
2640 2733 2642 2753 2645 2773 2647 2794 2649 2816 2651 2838 2654 2861 2656 2885 2658 2909 2660 2934 
2663 2960 2665 2986 2667 3013 2669 3040 2672 3068 2674 3097 2676 3127 2678 3157 2681 3188 2683 3189 
2685 3161 2687 3134 2690 3108 2692 3082 2694 3057 2696 3033 2699 3009 2701 2986 2703 2964 2705 2942 
2708 2921 2710 2900 2712 2880 2714 2861 2717 2843 2719 2825 2721 2807 2723 2791 2726 2775 2728 2760 
2730 2745 2732 2731 2735 2718 2737 2705 2739 2693 2741 2682 2744 2671 2746 2661 2748 2651 2750 2642 
2753 2634 2755 2627 2757 2620 2759 2614 2762 2608 2764 2603 2766 2599 2768 2595 2771 2592 2773 2590 
2775 2588 2777 2587 2780 2587 2782 2587 2784 2588 2786 2590 2789 2592 2791 2595 2793 2599 2795 2603 
2798 2608 2800 2613 2802 2619 2804 2626 2807 2634 2809 2642 2811 2650 2813 2660 2816 2670 2818 2681 
2820 2692 2822 2704 2825 2717 2827 2730 2829 2744 2831 2758 2834 2774 2836 2790 2838 2806 2840 2823 
2843 2841 2845 2860 2847 2879 2849 2899 2852 2919 2854 2940 2856 2962 2858 2984 2861 3007 2863 3031 
2865 3055 2867 3080 2870 3106 2872 3132 2874 3159 2876 3187 2879 3188 2881 3163 2883 3139 2885 3116 
2888 3093 2890 3071 2892 3049 2894 3028 2897 3008 2899 2988 2901 2969 2903 2951 2906 2934 2908 2916 
2910 2900 2912 2884 2915 2869 2917 2855 2919 2841 2921 2828 2924 2816 2926 2804 2928 2793 2930 2782 
2933 2772 2935 2763 2937 2755 2939 2747 2942 2739 2944 2733 2946 2727 2948 2722 2951 2717 2953 2713 
2955 2710 2957 2707 2960 2705 2962 2703 2964 2703 2966 2703 2969 2703 2971 2704 2973 2706 2975 2709 
2978 2712 2980 2716 2982 2720 2984 2725 2987 2731 2989 2737 2991 2744 2993 2752 2996 2760 2998 2769 
3000 2779 3002 2789 3005 2800 3007 2812 3009 2824 3011 2837 3014 2850 3016 2865 3018 2879 3020 2895 
3023 2911 3025 2928 3027 2945 3029 2963 3032 2982 3034 3002 3036 3022 3038 3042 3041 3064 3043 3086 
3045 3108 3047 3132 3050 3155 3052 3180 3054 3181 3056 3159 3059 3138 3061 3117 3063 3097 3065 3077 
3068 3058 3070 3040 3072 3023 3074 3006 3077 2990 3079 2974 3081 2959 3083 2945 3086 2931 3088 2918 
3090 2906 3092 2894 3095 2883 3097 2873 3099 2863 3101 2854 3104 2845 3106 2837 3108 2830 3110 2824 
3113 2818 3115 2813 3117 2808 3119 2804 3122 2801 3124 2798 3126 2797 3128 2795 3131 2795 3133 2795 
3135 2795 3137 2796 3140 2798 3142 2801 3144 2804 3146 2808 3149 2813 3151 2818 3153 2824 3155 2830 
3158 2837 3160 2845 3162 2854 3164 2863 3167 2873 3169 2883 3171 2894 3173 2906 3176 2918 3178 2931 
3180 2945 3182 2959 3185 2974 3187 2989 3189 3006 3191 3023 3194 3040 3196 3058 3198 3077 3200 3097 
3203 3117 3205 3138 3207 3159 3209 3181 3212 3182 3214 3162 3216 3143 3218 3125 3221 3107 3223 3090 
3225 3073 3227 3057 3230 3042 3232 3027 3234 3013 3236 3000 3239 2987 3241 2975 3243 2964 3245 2953 
3248 2943 3250 2933 3252 2924 3254 2916 3257 2909 3259 2902 3261 2896 3263 2890 3266 2885 3268 2881 
3270 2877 3272 2874 3275 2872 3277 2870 3279 2869 3281 2869 3284 2869 3286 2870 3288 2872 3290 2874 
3293 2877 3295 2881 3297 2885 3299 2890 3302 2895 3304 2901 3306 2908 3308 2915 3311 2924 3313 2932 
3315 2942 3317 2952 3320 2962 3322 2974 3324 2986 3326 2998 3329 3012 3331 3026 3333 3040 3335 3055 
3338 3071 3340 3088 3342 3105 3344 3123 3347 3141 3349 3161 3351 3180 3353 3181 3356 3164 3358 3146 
3360 3130 3362 3114 3365 3099 3367 3084 3369 3071 3371 3057 3374 3045 3376 3033 3378 3022 3380 3011 
3383 3001 3385 2992 3387 2983 3389 2975 3392 2968 3394 2961 3396 2955 3398 2949 3401 2945 3403 2940 
3405 2937 3407 2934 3410 2932 3412 2930 3414 2929 3416 2929 3419 2930 3421 2931 3423 2932 3425 2935 
3428 2938 3430 2941 3432 2946 3434 2951 3437 2956 3439 2963 3441 2970 3443 2977 3446 2985 3448 2994 
3450 3004 3452 3014 3455 3025 3457 3036 3459 3048 3461 3061 3464 3074 3466 3089 3468 3103 3470 3119 
3473 3135 3475 3151 3477 3169 3479 3187 3482 3188 3484 3171 3486 3156 3488 3141 3491 3127 3493 3113 
3495 3100 3497 3088 3500 3077 3502 3066 3504 3055 3506 3046 3509 3037 3511 3028 3513 3021 3515 3014 
3518 3007 3520 3002 3522 2996 3524 2992 3527 2988 3529 2985 3531 2983 3533 2981 3536 2980 3538 2979 
3540 2979 3542 2980 3545 2981 3547 2983 3549 2986 3551 2989 3554 2994 3556 2998 3558 3003 3560 3009 
3563 3016 3565 3023 3567 3031 3569 3040 3572 3049 3574 3059 3576 3069 3578 3081 3581 3092 3583 3105 
3585 3118 3587 3132 3590 3146 3592 3161 3594 3177 3596 3178 3599 3164 3601 3150 3603 3137 3605 3125 
3608 3114 3610 3103 3612 3093 3614 3083 3617 3074 3619 3066 3621 3058 3623 3051 3626 3045 3628 3039 
3630 3034 3632 3030 3635 3026 3637 3023 3639 3021 3641 3019 3644 3018 3646 3017 3648 3018 3650 3018 
3653 3020 3655 3022 3657 3025 3659 3028 3662 3032 3664 3037 3666 3043 3668 3049 3671 3055 3673 3063 
3675 3071 3677 3079 3680 3089 3682 3098 3684 3109 3686 3120 3689 3132 3691 3145 3693 3158 3695 3172 
3698 3186 3700 3187 3702 3174 3704 3162 3707 3150 3709 3139 3711 3128 3713 3119 3716 3110 3718 3101 
3720 3093 3722 3086 3725 3080 3727 3074 3729 3069 3731 3064 3734 3060 3736 3057 3738 3054 3740 3052 
3743 3051 3745 3050 3747 3050 3749 3051 3752 3052 3754 3054 3756 3057 3758 3060 3761 3064 3763 3068 
3765 3074 3767 3079 3770 3086 3772 3093 3774 3101 3776 3109 3779 3118 3781 3128 3783 3139 3785 3150 
3788 3161 3790 3174 3792 3187 3794 3187 3797 3176 3799 3165 3801 3154 3803 3145 3806 3135 3808 3127 
3810 3119 3812 3112 3815 3106 3817 3100 3819 3095 3821 3090 3824 3086 3826 3083 3828 3081 3830 3079 
3833 3077 3835 3077 3837 3077 3839 3078 3842 3079 3844 3081 3846 3084 3848 3087 3851 3091 3853 3095 
3855 3101 3857 3107 3860 3113 3862 3120 3864 3128 3866 3137 3869 3146 3871 3156 3873 3166 3875 3177 
3878 3178 3880 3168 3882 3158 3884 3150 3887 3142 3889 3134 3891 3128 3893 3122 3896 3116 3898 3111 
3900 3107 3902 3104 3905 3101 3907 3099 3909 3097 3911 3097 3914 3096 3916 3097 3918 3098 3920 3100 
3923 3102 3925 3105 3927 3109 3929 3113 3932 3118 3934 3124 3936 3130 3938 3137 3941 3145 3943 3153 
3945 3162 3947 3171 3950 3182 3952 3182 3954 3173 3956 3165 3959 3157 3961 3149 3963 3143 3965 3137 
3968 3132 3970 3127 3972 3123 3974 3120 3977 3117 3979 3115 3981 3114 3983 3113 3986 3113 3988 3114 
3990 3115 3992 3117 3995 3120 3997 3123 3999 3127 4001 3131 4004 3136 4006 3142 4008 3148 4010 3156 
4013 3163 4015 3172 4017 3181 4019 3181 4022 3173 4024 3166 4026 3159 4028 3153 4031 3147 4033 3142 
4035 3138 4037 3135 4040 3132 4042 3129 4044 3128 4046 3127 4049 3126 4051 3127 4053 3128 4055 3129 
4058 3132 4060 3135 4062 3138 4064 3142 4067 3147 4069 3153 4071 3159 4073 3166 4076 3173 4078 3182 
4080 3182 4082 3175 4085 3168 4087 3162 4089 3157 4091 3152 4094 3148 4096 3145 4098 3142 4100 3140 
4103 3138 4105 3138 4107 3137 4109 3138 4112 3139 4114 3141 4116 3143 4118 3146 4121 3150 4123 3155 
4125 3160 4127 3165 4130 3172 4132 3179 4134 3179 4136 3173 4139 3167 4141 3162 4143 3158 4145 3154 
4148 3151 4150 3149 4152 3147 4154 3146 4157 3146 4159 3146 4161 3147 4163 3148 4166 3150 4168 3153 
4170 3157 4172 3161 4175 3166 4177 3171 4179 3177 4181 3177 4184 3172 4186 3167 4188 3163 4190 3160 
4193 3157 4195 3155 4197 3153 4199 3152 4202 3152 4204 3152 4206 3153 4208 3155 4211 3157 4213 3160 
4215 3164 4217 3168 4220 3173 4222 3179 4224 3179 4226 3174 4229 3170 4231 3166 4233 3163 4235 3161 
4238 3159 4240 3158 4242 3157 4244 3158 4247 3158 4249 3160 4251 3162 4253 3165 4256 3168 4258 3172 
4260 3177 4262 3182 4265 3183 4267 3178 4269 3174 4271 3170 4274 3167 4276 3165 4278 3164 4280 3163 
4283 3162 4285 3163 4287 3164 4289 3166 4292 3168 4294 3171 4296 3174 4298 3179 4301 3179 4303 3175 
4305 3172 4307 3169 4310 3168 4312 3166 4314 3166 4316 3166 4319 3167 4321 3168 4323 3170 4325 3173 
4328 3176 4330 3180 4332 3180 4334 3177 4337 3174 4339 3171 4341 3170 4343 3169 4346 3169 4348 3169 
4350 3170 4352 3172 4355 3174 4357 3177 4359 3181 4361 3181 4364 3178 4366 3175 4368 3173 4370 3172 
4373 3171 4375 3171 4377 3172 4379 3173 4382 3175 4384 3178 4386 3181 4388 3181 4391 3178 4393 3176 
4395 3174 4397 3173 4400 3173 4402 3174 4404 3174 4406 3176 4409 3178 4411 3181 4413 3181 4415 3179 
4418 3177 4420 3176 4422 3175 4424 3175 4427 3176 4429 3177 4431 3179 4433 3181 4436 3182 4438 3179 
4440 3178 4442 3177 4445 3176 4447 3177 4449 3178 4451 3179 4454 3179 4456 3178 4458 3177 4460 3177 
4463 3177 4465 3179 4467 3181 4469 3181 4472 3179 4474 3178 4476 3178 4478 3178 4481 3179 4483 3181 
4485 3181 4487 3179 4490 3179 4492 3178 4494 3179 4496 3180 4499 3180 4501 3179 4503 3179 4505 3179 
4508 3180 4510 3180 4512 3179 4514 3179 4517 3180 4519 3181 4521 3181 4523 3180 4526 3179 4528 3180 
4530 3180 4532 3180 4535 3180 4537 3180 4539 3180 4541 3180 4544 3180 4546 3180 4548 3180 4550 3180 
4553 3180 4555 3180 4557 3180 4559 3180 4562 3180 4564 3180 4566 3180 4568 3180 4571 3180 4573 3180 
4575 3180 4577 3180 4580 3180 4582 3180 4584 3180 4586 3180 4589 3180 4591 3180 4593 3180 4595 3180 
4598 3180 4600 3180 4602 3180 4604 3180 4607 3180 4609 3180 4611 3180 4613 3180 4616 3180 4618 3180 
4620 3180 4622 3180 4625 3180 4627 3180 4629 3180 4631 3180 4634 3180 4636 3180 4638 3180 4640 3180 
4643 3180 4645 3180 4647 3180 4649 3180 4652 3180 4654 3180 4656 3180 4658 3180 4661 3180 4663 3180 
4665 3180 4667 3180 4670 3180 4672 3180 4674 3180 4676 3180 4679 3180 4681 3180 4683 3180 4685 3180 
4688 3180 4690 3180 4692 3180 4694 3180 4697 3180 4699 3180 4701 3180 4703 3180 4706 3180 4708 3180 
4710 3180 4712 3180 4715 3180 4717 3180 4719 3180 4721 3180 4724 3180 4726 3180 4728 3180 4730 3180 
4733 3180 4735 3180 4737 3180 4739 3180 4742 3180 4744 3180 4746 3180 4748 3180 4751 3180 4753 3180 
4755 3180 4757 3180 4760 3180 4762 3180 4764 3180 4766 3180 4769 3180 4771 3180 4773 3180 4775 3180 
4778 3180 4780 3180 4782 3180 4784 3180 4787 3180 4789 3180 4791 3180 4793 3180 4796 3180 4798 3180 
4800 3180 4802 3180 4805 3180 4807 3180 4809 3180 4811 3180 4814 3180 4816 3180 4818 3180 4820 3180 
4823 3180 4825 3180 4827 3180 4829 3180 4832 3180 4834 3180 4836 3180 4838 3180 4841 3180 4843 3180 
4845 3180 4847 3180 4850 3180 4852 3180 4854 3180 4856 3180 4859 3180 4861 3180 4863 3180 4865 3180 
4868 3180 4870 3180 4872 3180 4874 3180 4877 3180 4879 3180 4881 3180 4883 3180 4886 3180 4888 3180 
4890 3180 4892 3180 4895 3180 4897 3180 4899 3180 4901 3180 4904 3180 4906 3180 4908 3180 4910 3180 
4913 3180 4915 3180 4917 3180 4919 3180 4922 3180 4924 3180 4926 3180 4928 3180 4931 3180 4933 3180 
4935 3180 4937 3180 4940 3180 4942 3180 4944 3180 4946 3180 4949 3180 4951 3180 4953 3180 4955 3180 
4958 3180 4960 3180 4962 3180 4964 3180 4967 3180 4969 3180 4971 3180 4973 3180 4976 3180 4978 3180 
4980 3180 4982 3180 4985 3180 4987 3180 4989 3180 4991 3180 4994 3180 4996 3180 4998 3180 5000 3180 
5003 3180 5005 3180 5007 3180 5009 3180 5012 3180 5014 3180 5016 3180 5018 3180 5021 3180 5023 3180 
5025 3180 5027 3180 5030 3180 5032 3180 5034 3180 5036 3180 5039 3180 5041 3180 5043 3180 5045 3180 
5048 3180 5050 3180 5052 3180 5054 3180 5057 3180 5059 3180 5061 3180 5063 3180 5066 3180 5068 3180 
5070 3180 5072 3180 5075 3180 5077 3180 5079 3180 5081 3180 5084 3180 5086 3180 5088 3180 5090 3180 
5093 3180 5095 3180 5097 3180 5099 3180 5102 3180 5104 3180 5106 3180 5108 3180 5111 3180 5113 3180 
5115 3180 5117 3180 5120 3180 5122 3180 5124 3180 5126 3180 5129 3180 5131 3180 5133 3180 5135 3180 
5138 3180 5140 3180 5142 3180 5144 3180 5147 3180 5149 3180 5151 3180 5153 3180 5156 3180 5158 3180 
5160 3180 5162 3180 5165 3180 5167 3180 5169 3180 5171 3180 5174 3180 5176 3180 5178 3180 5180 3180 
5183 3180 5185 3180 5187 3180 5189 3180 5192 3180 5194 3180 5196 3180 5198 3180 5201 3180 5203 3180 
5205 3180 5207 3180 5210 3180 5212 3180 5214 3180 5216 3180 5219 3180 5221 3180 5223 3180 5225 3180 
5228 3180 5230 3180 5232 3180 5234 3180 5237 3180 5239 3180 5241 3180 5243 3180 5246 3180 5248 3180 
5250 3180 
] dogrey 
1 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0) 723 3873 0  0.00 [723 3773 55 99] Show
%Latex:\myput{723}{367}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(1) 1173 3873 0  0.00 [1173 3773 55 99] Show
%Latex:\myput{1173}{367}{5}{1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1200 3710 1200 3773 
] dogrey 
32 Setcolor
32 Setcolor
(2) 1623 3873 0  0.00 [1623 3773 55 99] Show
%Latex:\myput{1623}{367}{5}{2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1650 3710 1650 3773 
] dogrey 
32 Setcolor
32 Setcolor
(3) 2073 3873 0  0.00 [2073 3773 55 99] Show
%Latex:\myput{2073}{367}{5}{3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2100 3710 2100 3773 
] dogrey 
32 Setcolor
32 Setcolor
(4) 2523 3873 0  0.00 [2523 3773 55 99] Show
%Latex:\myput{2523}{367}{5}{4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2550 3710 2550 3773 
] dogrey 
32 Setcolor
32 Setcolor
(5) 2973 3873 0  0.00 [2973 3773 55 99] Show
%Latex:\myput{2973}{367}{5}{5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3000 3710 3000 3773 
] dogrey 
32 Setcolor
32 Setcolor
(6) 3423 3873 0  0.00 [3423 3773 55 99] Show
%Latex:\myput{3423}{367}{5}{6}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3450 3710 3450 3773 
] dogrey 
32 Setcolor
32 Setcolor
(7) 3873 3873 0  0.00 [3873 3773 55 99] Show
%Latex:\myput{3873}{367}{5}{7}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3900 3710 3900 3773 
] dogrey 
32 Setcolor
32 Setcolor
(8) 4323 3873 0  0.00 [4323 3773 55 99] Show
%Latex:\myput{4323}{367}{5}{8}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4350 3710 4350 3773 
] dogrey 
32 Setcolor
32 Setcolor
(9) 4773 3873 0  0.00 [4773 3773 55 99] Show
%Latex:\myput{4773}{367}{5}{9}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4800 3710 4800 3773 
] dogrey 
32 Setcolor
32 Setcolor
(10) 5195 3873 0  0.00 [5195 3773 111 99] Show
%Latex:\myput{5195}{367}{5}{10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[975 3710 975 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1200 3710 1200 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1425 3710 1425 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1650 3710 1650 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1875 3710 1875 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2100 3710 2100 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2325 3710 2325 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2550 3710 2550 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2775 3710 2775 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3225 3710 3225 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3450 3710 3450 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3675 3710 3675 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3900 3710 3900 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4125 3710 4125 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4350 3710 4350 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4575 3710 4575 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4800 3710 4800 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[5025 3710 5025 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(-0.2) 506 3748 0  0.00 [506 3648 172 99] Show
%Latex:\myput{506}{492}{5}{-0.2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
32 Setcolor
32 Setcolor
(0.0) 539 3218 0  0.00 [539 3118 139 99] Show
%Latex:\myput{539}{1022}{5}{0.0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3180 690 3180 
] dogrey 
32 Setcolor
32 Setcolor
(0.2) 539 2688 0  0.00 [539 2588 139 99] Show
%Latex:\myput{539}{1552}{5}{0.2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
32 Setcolor
32 Setcolor
(0.4) 539 2158 0  0.00 [539 2058 139 99] Show
%Latex:\myput{539}{2082}{5}{0.4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
32 Setcolor
32 Setcolor
(0.6) 539 1628 0  0.00 [539 1528 139 99] Show
%Latex:\myput{539}{2612}{5}{0.6}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
32 Setcolor
32 Setcolor
(0.8) 539 1098 0  0.00 [539 998 139 99] Show
%Latex:\myput{539}{3142}{5}{0.8}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1060 690 1060 
] dogrey 
32 Setcolor
32 Setcolor
(1.0) 539 568 0  0.00 [539 468 139 99] Show
%Latex:\myput{539}{3672}{5}{1.0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3578 705 3578 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3445 705 3445 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3313 705 3313 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3180 705 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3048 705 3048 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 705 2915 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2783 705 2783 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2650 705 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2518 705 2518 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2385 705 2385 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2253 705 2253 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1987 705 1987 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1855 705 1855 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1722 705 1722 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1590 705 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1457 705 1457 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 705 1325 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1193 705 1193 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1060 705 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 927 705 927 
] dogrey 
 (drawsegs) 4 [ 32]
[750 795 705 795 
] dogrey 
 (drawsegs) 4 [ 32]
[750 663 705 663 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 5250 3710 
] dogrey 
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 530 
] dogrey 
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 


